// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Song {
  id            String   @id @default(cuid())
  title         String
  artist        String
  spotifyId     String?  @unique
  spotifyUrl    String?
  previewUrl    String?  // 30-second preview URL from Spotify
  album         String?
  year          Int?
  albumArt      String?  // Album artwork URL (640x640)
  albumArtSmall String?  // Album thumbnail URL (300x300)
  albumArtColor String?  // Dominant color from album art (hex format)
  albumArtColorRGB String? // RGB values as "r,g,b" string
  albumArtColorHSL String? // HSL values as "h,s,l" string
  language      String   @default("es")
  lyricsRaw     String?  // only if licensed; else null
  lyricsParsed  String?  // JSON string: [{line, sentenceIndex, tokens:[{text, lemma, pos, isVerb, tense?}]}]
  lyricsProvider String? // which provider supplied the lyrics (genius, musixmatch, etc.)
  lyricsLicensed Boolean @default(false) // whether lyrics are fully licensed or just excerpts
  songSummary     String? // AI-generated summary of the song's content/theme
  genres        String?  // comma-separated list of genres from Spotify
  popularity    Int?     // Spotify popularity score (0-100)
  danceability  Float?   // Spotify audio features
  energy        Float?   // Spotify audio features
  valence       Float?   // Spotify audio features (positivity)
  tempo         Float?   // BPM from Spotify
  isActive      Boolean  @default(true) // soft delete flag
  devRating     Int?     // Developer rating 1-5 stars (hidden in production)
  userRating    Int?     // User rating 1-5 stars
  hasLyrics     Boolean  @default(true) // User feedback: song has lyrics
  hasTranslations Boolean @default(true) // User feedback: song has translations
  synced        Boolean  @default(true) // User feedback: song is synced
  translations  Translation[]
  metrics       Metrics?
  savedBy       SavedSong[]
  level         Int?     // 1..5 (difficulty level)
  levelName     String?  // "Beginner", "Upper Beginner", etc.
  description   String?  // Description of difficulty characteristics
  order         Int?     // Sequential order 1-100
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([language])
  @@index([level])
  @@index([isActive])
  @@index([popularity])
}

model Translation {
  id          String   @id @default(cuid())
  songId      String   
  targetLang  String   // ISO 639-1 code (en, pt, fr, etc.)
  lyricsLines String?  // JSON array of translated lyric lines
  title       String?  // translated song title
  culturalNotes String? // cultural context for target language
  provider    String   @default("deepl") // translation service used
  confidence  Float?   // translation confidence score
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  song        Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  
  @@unique([songId, targetLang])
  @@index([targetLang])
}

model Metrics {
  id               String  @id @default(cuid())
  songId           String  @unique
  wordCount        Int
  uniqueWordCount  Int
  typeTokenRatio   Float
  avgWordFreqZipf  Float   // lower => harder
  verbDensity      Float
  tenseWeights     Float   // weighted sum by tense difficulty
  idiomCount       Int
  punctComplexity  Float
  difficultyScore  Float   // final composite
  song             Song    @relation(fields: [songId], references: [id], onDelete: Cascade)
}

// NextAuth.js authentication tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  spotifyId       String?   @unique  // Spotify user ID
  isPremium       Boolean   @default(false)  // Spotify Premium status
  country         String?   // User's country from Spotify
  accounts        Account[]
  sessions        Session[]
  savedSongs      SavedSong[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SavedSong {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
}

model Vocabulary {
  id              String   @id @default(cuid())
  word            String   @unique // Spanish word
  translation     String   // English translation
  partOfSpeech    String   // noun, verb, adjective, etc.
  frequency       Float    // Zipf frequency score
  usefulnessScore Float    // 0-1 score for learning priority
  definition      String?  // Optional detailed definition
  examples        String?  // JSON string: Array of example uses from songs
  conjugations    String?  // JSON string: For verbs: conjugation table
  synonyms        String?  // JSON string: Array of synonyms
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([usefulnessScore])
  @@index([frequency])
  @@index([partOfSpeech])
}